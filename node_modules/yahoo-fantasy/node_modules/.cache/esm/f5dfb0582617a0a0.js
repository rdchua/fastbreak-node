"main";let Game,League,Player,Roster,Team,Transaction,User;_261‍.w("./resources",[["Game",["Game"],function(v){Game=v}],["League",["League"],function(v){League=v}],["Player",["Player"],function(v){Player=v}],["Roster",["Roster"],function(v){Roster=v}],["Team",["Team"],function(v){Team=v}],["Transaction",["Transaction"],function(v){Transaction=v}],["User",["User"],function(v){User=v}]]);let Games,Leagues,Players,Teams;_261‍.w("./collections",[["Games",["Games"],function(v){Games=v}],["Leagues",["Leagues"],function(v){Leagues=v}],["Players",["Players"],function(v){Players=v}],["Teams",["Teams"],function(v){Teams=v}]]);let extractCallback;_261‍.w("./helpers/argsParser.mjs",[["extractCallback",["extractCallback"],function(v){extractCallback=v}]]);let request;_261‍.w("request",[["default",["request"],function(v){request=v}]]);/* global module, require */
// ("use strict");











 // Transactions, Users } from "./collections";





class YahooFantasy {
  constructor(consumerKey, consumerSecret) {
    this.GET = "GET";
    this.POST = "POST";

    this.game = new Game(this);
    this.games = new Games(this);

    this.league = new League(this);
    this.leagues = new Leagues(this);

    this.player = new Player(this);
    this.players = new Players(this);

    this.team = new Team(this);
    this.teams = new Teams(this);

    this.transaction = new Transaction(this);
    // this.transactions = new Transactions(this);

    this.roster = new Roster(this);

    this.user = new User(this);
    // this.users = new Users(); // TODO

    this.yahooUserToken = null;
  }

  setUserToken(token) {
    this.yahooUserToken = token;
  }

  api(...args) {
    const method = args.shift();
    const url = args.shift();
    const cb = extractCallback(args);
    let postData = false;

    if (args.length) {
      postData = args.pop();
    }

    var options = {
      url: url,
      method: method,
      json: true,
      auth: {
        bearer: this.yahooUserToken
      }
    };

    return new Promise((resolve, reject) => {
      request(options, (e, body, data) => {
        const err = e || data.error;
        if (err) {
          reject(err);
          return cb(err);
        }
        resolve(data);
        return cb(null, data);
      });
    });
  }
}

_261‍.d(YahooFantasy);
